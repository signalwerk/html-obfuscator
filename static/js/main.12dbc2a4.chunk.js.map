{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["obfuscator","address","content","str","tag","hex","Array","from","map","c","charCodeAt","toString","encodeURIComponent","replace","toLowerCase","join","script","App","useState","setContent","setAddress","className","href","rel","target","name","type","value","onChange","e","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAmBMA,G,MAAa,SAACC,EAASC,GAC3B,IAhBgBC,EAgBVC,EAAG,0BAAsBH,EAAtB,aAAkCC,EAAlC,QACHG,GAjBUF,EAiBMC,EAhBfE,MAAMC,KAAKJ,GACfK,KAAI,SAAAC,GAAC,OACJA,EAAEC,WAAW,GAAK,IACdD,EAAEC,WAAW,GAAGC,SAAS,IACzBC,mBAAmBH,GAChBI,QAAQ,KAAM,IACdC,iBAERC,KAAK,KAcR,MAAO,CAAEX,MAAKY,OAJF,oGACqCX,EADrC,kHAwECY,MAjEf,WAAgB,IAAD,EACiBC,mBAAS,wBAD1B,mBACNhB,EADM,KACGiB,EADH,OAEiBD,mBAAS,oBAF1B,mBAENjB,EAFM,KAEGmB,EAFH,OAGWpB,EAAWC,EAASC,GAApCE,EAHK,EAGLA,IAAKY,EAHA,EAGAA,OACb,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAChB,+CACA,6PAIwB,6BAJxB,YAKY,IACV,uBACEC,KAAK,2CACLC,IAAI,sBACJC,OAAO,UAHT,eAMK,IAZP,kBAeA,6BACA,8BAEF,yBAAKH,UAAU,eACb,+BACE,yBAAKA,UAAU,cAAf,QACA,2BACEI,KAAK,kBACLC,KAAK,OACLC,MAAOzB,EACP0B,SAAU,SAAAC,GAAC,OAAIV,EAAWU,EAAEL,OAAOG,WAGvC,6BACA,+BACE,yBAAKN,UAAU,cAAf,WACA,2BACEI,KAAK,kBACLC,KAAK,OACLC,MAAO1B,EACP2B,SAAU,SAAAC,GAAC,OAAIT,EAAWS,EAAEL,OAAOG,WAGvC,6BACA,6BACA,yCACA,8BAAUN,UAAU,YAAYM,MAAOX,IACvC,6BACA,6BACA,uCACA,8BAAOZ,GACP,6BACA,6BACA,uCACA,uBAAG0B,wBAAyB,CAAEC,OAAQ3B,KACtC,6BACA,gCC7EY4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.12dbc2a4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\n// https://stackoverflow.com/questions/21647928/javascript-unicode-string-to-hex\nconst utf8ToHex = str => {\n  return Array.from(str)\n    .map(c =>\n      c.charCodeAt(0) < 128\n        ? c.charCodeAt(0).toString(16)\n        : encodeURIComponent(c)\n            .replace(/%/g, \"\")\n            .toLowerCase()\n    )\n    .join(\"\");\n};\n// function hexToUtf8: function(hex) {\n//   return decodeURIComponent('%' + hex.match(/.{1,2}/g).join('%'));\n// }\n\nconst obfuscator = (address, content) => {\n  const tag = `<a href=\"mailto:${address}\">${content}</a>`;\n  const hex = utf8ToHex(tag);\n\n  const script = `<!-- obfuscator.signalwerk.ch -->\n<script>document.write(decodeURIComponent('%' + '${hex}'.match(/.{1,2}/g).join('%')));</script>\n<noscript>Turn on JavaScript to see the email address</noscript>`;\n\n  return { tag, script };\n};\n\nfunction App() {\n  const [content, setContent] = useState(\"Mail me ✉️\");\n  const [address, setAddress] = useState(\"demo@example.com\");\n  const { tag, script } = obfuscator(address, content);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>mail obfuscator</h1>\n        <p>\n          There are many ways to obfuscate mail addresses. The approach shown\n          here is optimized to have a general solution for all texts including\n          multibyte strings (emojis). Furthermore, the goal was to have a\n          compact restore code. <br />\n          Check the{\" \"}\n          <a\n            href=\"https://github.com/signalwerk/obfuscator\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            source code\n          </a>{\" \"}\n          for this tool.\n        </p>\n        <br />\n        <br />\n      </header>\n      <div className=\"App-content\">\n        <label>\n          <div className=\"label-text\">Text</div>\n          <input\n            name=\"use frontmatter\"\n            type=\"text\"\n            value={content}\n            onChange={e => setContent(e.target.value)}\n          />\n        </label>\n        <br />\n        <label>\n          <div className=\"label-text\">Address</div>\n          <input\n            name=\"use frontmatter\"\n            type=\"text\"\n            value={address}\n            onChange={e => setAddress(e.target.value)}\n          />\n        </label>\n        <br />\n        <br />\n        <h3>HTML-Code</h3>\n        <textarea className=\"App-input\" value={script} />\n        <br />\n        <br />\n        <h3>Decoded</h3>\n        <code>{tag}</code>\n        <br />\n        <br />\n        <h3>Preview</h3>\n        <p dangerouslySetInnerHTML={{ __html: tag }} />\n        <br />\n        <br />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}